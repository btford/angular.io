

.l-main-section

  h2#section-configuring-the-router Configuring the Router

  p This section shows the many ways to configure routes in Component Router.

  p.
    Unlike other routing systems, Component Router maps URLs to components. A router takes an array of pairings like
    this:

  <!--[if Angular1]>
  .code-box
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //ES5
        MyController.$routeConfig = [
          { path: '/user', component: 'user' }
        ];
  <![endif]-->

  <!--[if Angular2]>
  .code-box
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //TODO Need Angular2 Example here for ES5 and TS

  <!--<![endif]-->

  .l-sub-section
    h3#section-sibling-outlets Sibling Outlets


    p You can configure multiple outlets on the same path like this:

    <!--[if Angular1]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          MyController.$routeConfig = [
              { path: '/user',
                components: {
                  master: 'userList',
                  detail: 'user'
              } }
            ];

      pre.prettyprint.linenums.lang-html(data-name="html")
      code.
        //HTML
        &lt;div ng-outlet=&quot;master&quot;&gt;&lt;/div&gt;
        &lt;div ng-outlet=&quot;detail&quot;&gt;&lt;/div&gt;

    <![endif]-->
    <!--[if Angular2]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          //TODO: Need Angular 2 ES5 Example here

      pre.prettyprint.linenums.lang-typescript(data-name="typescript")
        code.
          //TypeScript
          @Component({})
          @View({
            template:
              `<div router-outlet="master"></div>
               <div router-outlet="detail"></div>`,
            directives: [RouterOutlet, RouterLink]
          })
          @RouteConfig({
            path: '/user', components: {
              master: 'userList',
              detail: 'user'
            }
          })
          class MyComponent {}

    <!--<![endif]-->

    p You can link to any sibling just as you normally would:

    <!--[if Angular1]>
    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;p&gt;These both link to the same view:&lt;/p&gt;
        &lt;a ng-link=&quot;userList&quot;&gt;link to userList&lt;/a&gt;
        &lt;a ng-link=&quot;user&quot;&gt;link to user component&lt;/a&gt;
    <![endif]-->
    <!--[if Angular2]>
    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;p&gt;These both link to the same view:&lt;/p&gt;
        &lt;a router-link=&quot;userList&quot;&gt;link to userList&lt;/a&gt;
        &lt;a router-link=&quot;user&quot;&gt;link to user component&lt;/a&gt;
    <!--<![endif]-->

    p Or, you can explicitly link to a outlet-component pair like this:

    <!--[if Angular1]>
    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;p&gt;These both link to the same view:&lt;/p&gt;
        &lt;a ng-link=&quot;master:userList&quot;&gt;link to userList&lt;/a&gt;
        &lt;a ng-link=&quot;detail:user&quot;&gt;link to user component&lt;/a&gt;
    <![endif]-->
    <!--[if Angular2]>
    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;p&gt;These both link to the same view:&lt;/p&gt;
        &lt;a router-link=&quot;master:userList&quot;&gt;link to userList&lt;/a&gt;
        &lt;a router-link=&quot;detail:user&quot;&gt;link to user component&lt;/a&gt;

  .l-sub-section
    h3#section-redirecting-routes Redirecting routes

    p You can use `redirectTo` for migrating to a new URL scheme and setting up default routes.

    p.
      For example, as specified below, when a user navigates to `/`, the URL changes to `/user` and the outlet
      at that level loads the `user` component.

    <!--[if Angular1]>
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //ES5
        MyController.$routeConfig = [
          { path: '/', redirectTo: '/user' },
          { path: '/user', component: 'user' }
        ];
        function MyController() {}
    <![endif]-->
    <!--[if Angular2]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          //TODO: Need Angular 2 ES5 Example here
      pre.prettyprint.linenums.lang-typescript(data-name="typescript")
        code.
          //TypeScript
          @Component({})
          @View({
            directives: [RouterOutlet]
          })
          @RouteConfig([
            { path: '/', redirectTo: '/user' },
            { path: '/user', component: UserComp }
          ])
          class MyComp {}
    <!--<![endif]-->

  .l-sub-section
    h3#section-aliases Aliases

    p.
      When linking to a route, you normally use the name of the component. You can also specify an alias to use
      instead.

    p Consider the following route configuration:

    <!--[if Angular1]>
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //ES5
        MyController.$routeConfig = [
          { path: '/', component: 'user' }
        ];
    <![endif]-->
    <!--[if Angular2]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          //TODO: Need Angular 2 ES5 Example here
      pre.prettyprint.linenums.lang-typescript(data-name="typescript")
        code.
          //TypeScript
          @Component({})
          @View({
            directives: [RouterOutlet]
          })
          @RouteConfig([
            { path: '/', component: 'user' }
          ])
          class MyComp {}
    <!--<![endif]-->

    p We can link to the route in our template with the name of the component:
    <!--[if Angular1]>
    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;a ng-link=&quot;user&quot;&gt;link to user component&lt;/a&gt;
    <![endif]-->
    <!--[if Angular2]>
    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;a router-link=&quot;user&quot;&gt;link to user component&lt;/a&gt;
    <!--<![endif]-->

    p Or, we can define an alias `myUser` like this:

    <!--[if Angular1]>
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //ES5
        MyController.$routeConfig = [
          { path: '/', component: 'user', as: 'myUser' }
        ];
    <![endif]-->
    <!--[if Angular2]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          //TODO: Need Angular 2 ES5 Example here
      pre.prettyprint.linenums.lang-typescript(data-name="typescript")
        code.
          //TypeScript
          //TODO: Need Angular 2 TS Example here
    <!--<![endif]-->

    p And refer instead to the alias for the component in our template, with the same end-result:
    <!--[if Angular1]>
    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;a ng-link=&quot;myUser&quot;&gt;link to user component&lt;/a&gt;
    <![endif]-->
    <!--[if Angular2]>
    pre.prettyprint.linenums.lang-html
      code.
        //HTML
        &lt;a router-link=&quot;myUser&quot;&gt;link to user component&lt;/a&gt;
    <!--<![endif]-->

    p.
      This is especially useful when you have sibling components, but want to refer to an entire level of routing in
      your controller. For example:

    <!--[if Angular1]>
    pre.prettyprint.linenums.lang-javascript(data-name="es5")
      code.
        //ES5
        MyController.$routeConfig = [
          { path: '/',
            components: {
              master: 'userList',
              detail: 'user'
            },
            as: 'myUser'
          }
        ];
    <![endif]-->
    <!--[if Angular2]>
    .code-box
      pre.prettyprint.linenums.lang-javascript(data-name="es5")
        code.
          //ES5
          //TODO: Need Angular 2 ES5 Example here
      pre.prettyprint.linenums.lang-typescript(data-name="typescript")
        code.
          //TypeScript
          //TODO: Need Angular 2 TS Example here
    <!--<![endif]-->

  .l-sub-section
    h3#dynamic-configuration Dynamic Configuration

    p You can configure dynamic routing by making a request for `$router`.


